openapi: "3.0.2"
info:
  title: GA4GH Discovery Search API
  version: 0.2.0
  description: |
    Search is an API for searching biomedical data.

    More information on [GitHub](https://github.com/ga4gh-discovery/ga4gh-discovery-search).
  license:
    name: 'Apache 2.0'
    url: 'https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-discovery-search/develop/LICENSE'
  contact:
    name: 'GA4GH Discovery Search Team'
    email: 'ga4gh-discovery-search@ga4gh.org'
security:
  - bearerAuth: []
paths:
  /tables:
    get:
      summary: List Tables
      description: Returns a list of Tables.
      operationId: listTables
      tags:
        - tables
      responses:
        '200':
          description: A list of Tables
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTablesResponse"
        '500':
          description: An unexpected error occurred
  /table/{table_name}/info:
    get:
      summary: Get a Table
      description: Returns the information about the Table identified by name.
      operationId: getTable
      tags:
        - tables
      parameters:
        - name: table_name
          in: path
          description: Unique Table name, unique to this implementation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A Table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
        '404':
          description: This server does not implement the data operation
        '500':
          description: An unexpected error occurred
  /table/{table_name}/data:
    get:
      summary: Fetch data from a Table
      description: Optional operation that returns data from a Table
      operationId: getData
      tags:
        - tables
      parameters:
        - name: table_name
          in: path
          description: Unique Table name, unique to this implementation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data from the Table
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableData"
        '404':
          description: This server does not implement the data operation
        '500':
          description: An unexpected error occurred
  /search:
    post:
      summary: Perform a search on Tables
      description: Optional operation that accepts a Query and returns a TableData
      operationId: search
      tags:
        - search
      responses:
        '200':
          description: Query results returned as TableData
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TableData"
        '404':
          description: This server does not implement the search operation
        '500':
          description: An unexpected error occurred
  /service-info:
    get:
      summary: 'Show information about the Search service'
      operationId: getServiceInfo
      tags:
        - service-info
      responses:
        '200':
          description: |
            Show information about this Search service.

            Use `"type": {"group": "org.ga4gh", "artifact": "search", "version": "0.1.0"}` when implementing this specification directly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '500':
          description: An unexpected error occurred
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    ListTablesResponse:
      required:
        - tables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: "#/components/schemas/Table"
        pagination:
          $ref: '#/components/schemas/Pagination'
        errors:
          type: array
          description: List of errors encountered
          items:
            $ref: "#/components/schemas/Error"
      additionalProperties: false
    Table:
      required:
        - name
        - data_model
      type: object
      properties:
        name:
          type: string
          description: Table name
        description:
          type: string
          description: Optional description of the Table
        data_model:
          $ref: "http://json-schema.org/draft-07/schema#"
        errors:
          type: array
          description: List of errors encountered
          items:
            $ref: "#/components/schemas/Error"
      description: |
        Describes a Table hosted by this search node.
    TableData:
      required:
        - data_model
        - data
      type: object
      properties:
        data_model:
          $ref: "http://json-schema.org/draft-07/schema#"
        data:
          type: array
          description: Page of JSON values, each adhering to the schema given in the "data_model" property
          items:
            # Each item must conform to the schema provided in the "data_model" section of this Table.
            # Not sure if this constraint can be expressed in OpenAPI 3.0.
            type: object
        pagination:
          $ref: "#/components/schemas/Pagination"
        errors:
          type: array
          description: List of errors encountered
          items:
            $ref: "#/components/schemas/Error"
      description: A paginated collection of tabular data
    Error:
      type: object
      properties:
        source:
          type: string
          description: >
            The "source" field should only be present when the error originated in an attached data source backing the Search
            API. The value of source can be any of the following:

            1. A fully qualified table `name`
            2. Any prefix of a table `name` that ends before a `.` character in the name. For example
            if there is a table called `foo.bar.baz`, valid prefixes would be `foo` and `foo.bar`. Partial prefixes
            which do not end just before a `.`, are not valid. For example: `foo.b` and `fo` are not allowed.

            If the error originated inside the Search API implementation and is not associated with any particular table
            or group of tables, then the source must be absent. An example of this would be an error occurring from a bug
            in the implementation. Additionally, if the error is due to a bad request from the client, the source must
            also be absent.
        message:
          type: string
          description: An informative message associated with the error
        code:
          $ref: "#/components/schemas/ErrorCode"
        attributes:
          type: object
          description: >
            Additional attributes which contain KV pairs that help identify or manage the error. For example, this may help communicate
            the context in which the error occurred, contain response headers from the originating system, or contain additional
            attributes needed to inform the client of the error.
          additionalProperties:
            type: string
    ErrorCode:
      type: string
      description: >
        Error codes are strings which the Search API can use to communicate the "Type" of error which a request has
        encountered. There are two error codes with all search API's and clients are required to understand

        1. `ERROR_RESPONSE`: This is a general error code, indicating that some error has occurred while attempting to fulfill
        the clients request. If it is unclear which type of error code a server should return, it may use `ERROR_RESPONSE` as a "catch-all"

        2. `NO_RESPONSE`: Search servers should respond with this error code if they fail to receive a response from their configured
        data source within a set timeout period.

        Search API servers may extend the list of error codes, allowing them to define codes which match the particular error
        cases which they may encounter. Search API servers should ideally provide documentation describing the list of all error codes
        it will return and when they will be returned. If a client encounters a custom error code it does not understand,
        it must handle it as an `ERROR_RESPONSE` code.
      enum:
        - ERROR_RESPONSE
        - NO_RESPONSE
    Pagination:
      type: object
      properties  :
        next_page_url:
          type: string
          description: URL pointing to the next page of the same Table. Null or absent on last page.
          format: uri
    Service:
      $ref: 'https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-service-info/v1.0.0/service-info.yaml#/components/schemas/Service'